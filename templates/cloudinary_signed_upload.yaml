name: Cloudinary Signed Upload Endpoint
author: 
  name: yakirp
  link: https://github.com/yakirp
type: webhook
description: |
  A webtask that can be used as an endpoint for signed upload calls (from upload widget, Android, iOS,. etc)
note:
  title: How to use with Cloudinary Upload Widget
  content: |
    This template creates endpoint which generate and return signature of the upload request

    * You must set a valid `STRIPE_SECRET_KEY` for the `payment` API to work. 
    * Set a valid `STRIPE_PUBLISHABLE_KEY` for the payment page to work. 
    
    HTML Upload Widget code snippet example to embed into your web-page.
    ```html
      <script src="https://widget.cloudinary.com/v2.0/global/all.js" type="text/javascript">
      <script type="text/javascript">

      var widget = cloudinary.createUploadWidget({ 
      cloudName: <cloud_name>, 
      apiKey: <api_key>,
      uploadSignature: generateSignature}, (error, result) => { });
      var generateSignature = function(callback, params_to_sign){
      $.ajax({
            url     : "{url_to_your_webtask}",
            type    : "POST",
            dataType: "json",
            data    : params_to_sign,
            complete: function() {console.log("complete")},
            success : function(signature, textStatus, xhr) { callback(signature.signature); },
            error   : function(xhr, status, error) { console.log(xhr, status, error); }
      });
      }
      widget.open();
     </script>
    ```
    More info about the upload widget : https://cloudinary.com/documentation/upload_widget#content
code:
  js: |
    var express    = require('express');
    var Webtask    = require('webtask-tools');
    var bodyParser = require('body-parser');
    var cloudinary = require('cloudinary');

    var app = express();
    app.use(bodyParser.urlencoded());
    app.use(bodyParser.json()); 


    app.post('/', function (req, res) {

       var ctx = req.webtaskContext;
       cloudinary.config({ 
        cloud_name: ctx.secrets.CLOUD_NAME,
        api_key: ctx.secrets.API_KEY,
        api_secret: ctx.secrets.API_SECRET
      });

      var data = req.body;
      
      //We don't need to sign resource_type
      if (data.resource_type)
      delete data.resource_type;

      //If data already included timestamp (i.e from upload widget) we will not set a new value
      if (!data.timestamp)
      data.timestamp = Math.floor(new Date() / 1000);

      //Sign the request
      var signature = cloudinary.utils.api_sign_request(data, ctx.secrets.API_SECRET);

      //Return a JSON object signature
      res.json({ signature: signature, api_key:  ctx.secrets.API_KEY, timestamp: data.timestamp});
    });

module.exports = Webtask.fromExpress(app);  
secrets: 
  API_KEY   : 'REPLACE_WITH_CLOUDINARY_API_KEY'
  API_SECRET: 'REPLACE_WITH_CLOUDINARY_API_SECRET'
  CLOUD_NAME: 'REPLACE_WITH_YOUR_CLOUD_NAME'
