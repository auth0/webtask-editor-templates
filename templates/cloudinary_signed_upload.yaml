name: Cloudinary Signed Upload Endpoint
author: 
  name: yakirp
  link: https://github.com/yakirp
type: webhook
description: |
  A webtask that can be used as an endpoint for signed upload calls (from upload widget, Android, iOS,. etc)
note:
  title: How to use with Cloudinary Upload Widget
  content: |
    Cloudinary's upload widget is a complete, interactive UI that enables your users
    to upload files from a variety of sources to your website or application. 
    Advanced users can also use the upload widget with signed uploads for a more secure process when required.
    This template creates endpoint which generate and return signature of the upload request
   
    * You must set a valid `API_SECRET` +  `API_KEY` +  `CLOUD_NAME` for the API to work. 
        
    HTML Upload Widget code snippet example to embed into your web-page.
    ```html
     <script src="https://widget.cloudinary.com/v2.0/global/all.js" type="text/javascript">
     <script type="text/javascript">
     var generateSignature = function(callback, params_to_sign){
     $.ajax({
            url     : "{url_to_your_webtask}",
            type    : "GET",
            dataType: "json",
            data    : params_to_sign,
            complete: function() {console.log("complete")},
            success : function(signature, textStatus, xhr) { callback(signature.signature); },
            error   : function(xhr, status, error) { console.log(xhr, status, error); }
      });
     }
     var widget = cloudinary.createUploadWidget({ 
     cloudName: "<cloud_name>", 
     apiKey: "<api_key>",
     uploadSignature: generateSignature},
      (error, result) => {});
     
     widget.open();
     </script>
    ```
    More info about the upload widget : https://cloudinary.com/documentation/upload_widget#content
code:
  js: |
      var cloudinary = require('cloudinary');
      module.exports = function (context, req, res) {
      cloudinary.config({ 
        cloud_name: context.secrets.CLOUD_NAME,
        api_key: context.secrets.API_KEY,
        api_secret: context.secrets.API_SECRET
      });
      var data = context.query;
      //We don't need to sign resource_type
      if (data.resource_type)
      delete data.resource_type;
      //If data already included timestamp (i.e from upload widget) we will not set a new value
      if (!data.timestamp)
      data.timestamp = Math.floor(new Date() / 1000);
      //Sign the request
      var signature = cloudinary.utils.api_sign_request(data, context.secrets.API_SECRET);
      //Return a JSON object signature
      res.writeHead(200, { 'Content-Type': 'application/json'});
      res.end(JSON.stringify({ signature: signature, api_key: context.secrets.API_KEY, timestamp: data.timestamp}));
      }; 
secrets: 
  API_KEY   : 'REPLACE_WITH_CLOUDINARY_API_KEY'
  API_SECRET: 'REPLACE_WITH_CLOUDINARY_API_SECRET'
  CLOUD_NAME: 'REPLACE_WITH_YOUR_CLOUD_NAME'
